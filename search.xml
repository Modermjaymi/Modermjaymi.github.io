<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0x04 二分</title>
    <url>/2023/03/10/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h2 id="整数集合上的二分"><a href="#整数集合上的二分" class="headerlink" title="整数集合上的二分"></a>整数集合上的二分</h2><p>有一个数x，想要找<code>比x大的数中最小的</code>与<code>比x小的数中最大的</code>求法不同。各有自己的求法：</p>
<h3 id="找比x大的数中最小的"><a href="#找比x大的数中最小的" class="headerlink" title="找比x大的数中最小的"></a>找比x大的数中最小的</h3><p>记所有数字为<code>a[i]</code>，找<code>比x大的数中最小的</code>，即左半段可行，查找左半段，采用以下代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求 &gt;= x 的数中最小的 */</span></span><br><span class="line"><span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br></pre></td></tr></table></figure></div>

<p>主要修改<code>r</code>指针的位置，寻找到<code>小于</code>x的第一个数就停止，让<code>l</code>与<code>r</code>交错，最终取到这个值<code>a[l]</code>，此时<code>l == r</code>。倘若未找到，此时<code>l == r</code>，<code>a[l] == a[n]</code>(a : 1~n)</p>
<p><strong>例题：<a class="link" href="https://www.luogu.com.cn/problem/P1902">p1902 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h3 id="找比x小的数中最大的"><a href="#找比x小的数中最大的" class="headerlink" title="找比x小的数中最大的"></a>找比x小的数中最大的</h3><p>要找<code>比x小的数中最大的</code>，即右半段可行，采用以下代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">    <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br></pre></td></tr></table></figure></div>

<p>主要修改<code>l</code>指针的位置，寻找到第一个比x大的数字停止。<code>l</code>，<code>r</code>交错，最终取到所求值<code>a[l]</code>，此时<code>l == r</code>。倘若未找到，此时<code>l == r</code>，<code>a[l] == a[n]</code>(a : 1~n)</p>
<p><strong>例题：<a class="link" href="https://www.luogu.com.cn/problem/P2678">p2678 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<blockquote>
<p>小技巧：可以通过将原二分区间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.753ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2100.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1222.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1822.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>分别扩大成<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.753ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2100.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1222.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1822.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.65ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3823.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1222.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2044.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3045.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3545.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，当没有找到元素时，l或r会位于新加的位置之上，此时说明a中不存在要找的数</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总之，正确写出二分的流程为：</p>
<ul>
<li>分析具体问题，确定左右半段是哪个可行区间，mid应该趋向哪个半段</li>
<li>根据分析结果，选择<code>r = mid, l = mid + 1, mid = (l + r) &gt;&gt; 1</code>或者<code>l = mid, r = mid - 1, mid = (l + r + 1) &gt;&gt; 1</code></li>
<li>最终终止于<code>l == r</code>，此值即为答案所在位置</li>
</ul>
<p><strong>实验例程：</strong></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> a[] = {<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>};</span><br><span class="line">	<span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">		<span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; a[l] &lt;&lt; <span class="string">" *"</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p><a class="link" href="https://www.luogu.com.cn/training/9374">题单(每道题都很重要) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="实数域上的二分"><a href="#实数域上的二分" class="headerlink" title="实数域上的二分"></a>实数域上的二分</h2><p>我们需要确定二分精度<code>eps</code>，以<code>l + eps &lt; r</code>为循环条件，每次选择<code>r = mid</code>或<code>l = mid</code>分支之一即可。保留k位小数时，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.088ex" height="2.528ex" role="img" focusable="false" viewBox="0 -923.4 6226.9 1117.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(969,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1715.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2771.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1167,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1688,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2466,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2966,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container></p>
<blockquote>
<p>我们注意：考虑到精度，缩小区间时，我们得将<code>l</code>与<code>r</code>对齐才行，不可采取<code>-1/+1</code>等操作</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l + eps &lt; r) {</span><br><span class="line">	<span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>当精度不方便表示时，可以采用循环固定次数的二分方法，精度更高</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">    <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="三分"><a href="#三分" class="headerlink" title="三分"></a>三分</h2><p>通过将单峰函数均匀分成三等分，每次比较两个等分点，缩小较小的等分点进行比较，最终求出该函数极值的算法</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l + eps &lt; r) {</span><br><span class="line">		<span class="type">double</span> lmid = l + (r - l) / <span class="number">3.0</span>;</span><br><span class="line">		<span class="type">double</span> rmid = l + (r - l) / <span class="number">3.0</span> * <span class="number">2.0</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">calc</span>(lmid) &lt; <span class="built_in">calc</span>(rmid)) l = lmid;</span><br><span class="line">		<span class="keyword">else</span> r = rmid;</span><br><span class="line">	}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><a class="link" href="https://www.luogu.com.cn/problem/P3382">p3382 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> l, r;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> x)</span> </span>{</span><br><span class="line">	<span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">		<span class="type">double</span> cur = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">			cur *= x;</span><br><span class="line">		res += cur * a[i];</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (l + eps &lt; r) {</span><br><span class="line">		<span class="type">double</span> lmid = l + (r - l) / <span class="number">3.0</span>;</span><br><span class="line">		<span class="type">double</span> rmid = l + (r - l) / <span class="number">3.0</span> * <span class="number">2.0</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">calc</span>(lmid) &lt; <span class="built_in">calc</span>(rmid)) l = lmid;</span><br><span class="line">		<span class="keyword">else</span> r = rmid;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.5lf"</span>, l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法竞赛进阶指南通关计划</category>
        <category>0x04二分</category>
      </categories>
      <tags>
        <tag>算法竞赛进阶指南</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度加法&amp;乘法</title>
    <url>/2022/04/08/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<h1 id="高精度加法-amp-乘法"><a href="#高精度加法-amp-乘法" class="headerlink" title="高精度加法&amp;乘法"></a>高精度加法&amp;乘法</h1><blockquote>
<p>做题时常常遇到数值异常庞大的高精度题型，即使long long也无法存储，这时我们只能用模拟的方式，将数据存储在string中。</p>
</blockquote>
<h2 id="高进度加法"><a href="#高进度加法" class="headerlink" title="高进度加法"></a>高进度加法</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>首先搞定输入：</p>
<blockquote>
<p>由于是加法，所以输入的数据应该非常巨大，所以我们应该用string来存储：</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>],b[<span class="number">100001</span>],c[<span class="number">100001</span>];	</span><br><span class="line"><span class="comment">//a,b作为两个待加数，c作为结果</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2; <span class="comment">//用来存储输入的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><em>小技巧：利用数组的第一项来记录数组的长度，这样可以省出两个变量，但是记得在调用的时候for要从1开始。</em></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(); b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure></div>

<p>之后我们来将输入的数据(string)转换成真实的数字数据：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">    a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>具体的实现机理为：</p>
<p>对于当前的位，用当前字符的ASCII值减去0的ASCII的值实现真实的数字值，再强行转换成int类型，将值赋给a,b两个数组中，完整的处理数据。</p>
</blockquote>
<p>转换好数据，我们接着实行加法运算：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(a[<span class="number">0</span>],b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;	<span class="comment">//记得用0作为数组的长度</span></span><br><span class="line">    <span class="comment">//对位加对位，不用担心其中的一个数组的长度，已经初始化为0</span></span><br><span class="line">	c[i] = a[i]+b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>数据存好了，但是可以想到，有的位大于十，于是接着我们来实现进位操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    c[i] = a[i]+b[i];</span><br><span class="line">    <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这时候我们可以想到，c 数组中仍然有未存储的数据，其当前为0，所以我们肯定不能弃之不管。因此我们可以有如下操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">    len--;</span><br><span class="line"><span class="comment">//也可以写成：</span></span><br><span class="line"><span class="keyword">for</span>(len; len &gt; <span class="number">1</span> &amp;&amp; c[len] == <span class="number">0</span>; len--);</span><br></pre></td></tr></table></figure></div>

<p>最后的最后：输出</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>以下为完整代码：</strong></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000001</span>],b[<span class="number">10000001</span>],c[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="comment">//搞定输入，存储数据</span></span><br><span class="line">    a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(); b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    <span class="comment">//首先利用字符串相减的性质，将0的ASCII和当前数字相减</span></span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//所得到的为数字的真实数值，之后强制转换成int，得到答案。</span></span><br><span class="line">    len = <span class="built_in">max</span>(a[<span class="number">0</span>],b[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    	c[i] = a[i]+b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>; <span class="comment">//注意次序!</span></span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        cout &lt;&lt; c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h2><p>与加法类似，首先搞定输入：</p>
<p>同样是采用字符串转换成int进行存储：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(); b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>之后我们进行乘法运算：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">        c[i+j<span class="number">-1</span>] += a[i]*b[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这里要注意：由于乘法的特性，我们需要将一位和另一数组的所有位相乘，所以显然两个for是最佳选择。两个for的限制条件均为对应该数组的长度</p>
</blockquote>
<p>之后我们对计算好了的c数组进行进位操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">len = a[<span class="number">0</span>]+b[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>考虑一下，进位该进多少位？</p>
<p>应该进a[0] + b[0]位，例如两个最大二位数99*99=9801(4位)</p>
</blockquote>
<p>之后进行清零操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">    len--;</span><br></pre></td></tr></table></figure></div>

<p>然后输出：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000001</span>],b[<span class="number">10000001</span>],c[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="comment">//搞定输入，存储数据</span></span><br><span class="line">    a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(); b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    <span class="comment">//首先利用字符串相减的性质，将0的ASCII和当前数字相减</span></span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//所得到的为数字的真实数值，之后强制转换成int，得到答案。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++) &#123; <span class="comment">//存储数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            c[i+j<span class="number">-1</span>] += a[i]*b[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = a[<span class="number">0</span>]+b[<span class="number">0</span>]; <span class="comment">//两个n位数相乘 乘积最多是n+n位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123; <span class="comment">//进位</span></span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>; <span class="comment">//注意次序!</span></span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        cout &lt;&lt; c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
