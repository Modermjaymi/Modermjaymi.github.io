<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>写给学弟学妹们的算法竞赛入门建议</title>
    <url>/2023/03/22/guide/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在两年的学习中，我一直在问自己一个问题：算法竞赛对我究竟有什么意义。</p>
<p>在这篇文章中，我尝试反思自己究竟从两年的光阴得到了什么，同时也给大家给出一些建议</p>
</blockquote>
<p>在这篇文章中，你会读到：</p>
<ul>
<li>为什么参加算法竞赛</li>
<li>我对竞赛的看法与反思</li>
<li>竞赛工具使用指南</li>
</ul>
<p>:) 让我们开始吧！</p>
<h2 id="参加竞赛的意义"><a href="#参加竞赛的意义" class="headerlink" title="参加竞赛的意义"></a>参加竞赛的意义</h2><p>生活要有意义，才有存在的理由，算法竞赛更是如此。以下，我将从短期和长期角度出发，来聊聊参加算法竞赛的意义。</p>
<h3 id="短期"><a href="#短期" class="headerlink" title="短期"></a>短期</h3><h4 id="益处："><a href="#益处：" class="headerlink" title="益处："></a>益处：</h4><ol>
<li>快速积累编码水平</li>
</ol>
<p>在赛前大量题目的累积之中，赛时紧张激烈的压力环境下，你的代码能力可以飞速增长，甚至在一年内远超同龄人。当别人还磕磕绊绊走路时，你已经开始在赛道驰骋，在大量的训练下，你的水平会迅速超越同龄人，让你的老师，同学，甚至未来的面试官刮目相看。</p>
<ol start="2">
<li>迅速提升思维能力</li>
</ol>
<p>竞赛中少不了的就是模拟题。这些题目对于逻辑思考能力，情况判断能力，事实分析能力都有非常高的要求。虽然非常费脑，但在我看来，一个能够清楚分析问题，能够理性思考问题的大脑弥足珍贵，这足以影响我们的一生。</p>
<ol start="3">
<li>获得成就感</li>
</ol>
<p>当你火力全开，准备拿下一道算法题时，突然发现题目好像与你之前想的不太一样。当你从头再次思考，经历山重水复的茫茫黑夜后，突然灵光一闪，手忙脚乱的开始敲上凝聚自己心血的代码。最难受的便是等待评测的那十几秒，但在<code>accepted</code>的那一刻，你会觉得之前的努力都是值得的。整个参赛过程紧张刺激，如同武林大会，你可以看到各路选手各显神通，这也是其他地方难以见到的盛况。</p>
<p>接下来，我们重点谈谈算法竞赛的灰暗面：</p>
<h4 id="灰暗面"><a href="#灰暗面" class="headerlink" title="灰暗面"></a>灰暗面</h4><ul>
<li>带来巨大心理压力</li>
<li>挤占几乎所有业余时间</li>
<li>与做项目比较，收益较小</li>
</ul>
<p>为了在竞赛中获得名次，你必须要持之以恒的练习。在别人打游戏，刷视频的时候，你得做题。在别人有说有笑到处玩耍的时候，你得做题，情况就是这么残酷。并且，如果你将相同的精力，时间投入做项目，你很可能能够完成一个非常不错的优质项目。</p>
<p>那么，我们为什么要参加算法竞赛呢？</p>
<p>可能是为了自己心中的执念，想要在某一领域拔得头筹。可能是拒绝接受平庸的大学生活，不想再重复小学，初高中那机械的生活。可能你想对今后的人生做出改变，不想从事简单重复的乏味工作。可能，你想给自己的人生增添一抹亮色。</p>
<p>但：</p>
<p><strong>改变，总是伴随着痛苦</strong></p>
<p>这是无可奈何的事情，在我看来，人生也是这样。当你想在一个领域拔得头筹，你就得先忍受寂寞，承受进步所带来的巨大压力，忍受做不出题目，高强度思考等等情况带来的焦虑与沮丧，之后才可能有在该领域内的一点点微小成就。</p>
<p><strong>所以动心忍性，增益其所不能。</strong></p>
<h3 id="长期"><a href="#长期" class="headerlink" title="长期"></a>长期</h3><p>与短期收益相比，长期收益是我最为看重的。简而言之，长期意义分为以下几点：</p>
<ol>
<li>磨练自己忍受压力的能力</li>
</ol>
<p>毫无疑问，在算法竞赛短短的时间内，你要尽可能多的完成题目。竞赛途中，当你在一道题目上停滞不前，看到他人领先于你的时候，压力接踵而至。算法竞赛讲究的就是练习，平时参加网上的排位赛，其他时候参加线下的切磋交流。所以基本上你每天都生活在高压的环境之中，担心自己是否还有时间参加竞赛，担心自己能力进步过于迟缓。</p>
<ol start="2">
<li>养成完善，深邃的深度思考能力</li>
</ol>
<p>每个人都会思考，俗话说：“人类一思考，上帝就发笑”。但是要养成一个喜爱思考，勤于思考的习惯谈何容易！算法竞赛可以为你打开一扇门，让你见到更多思维方式与处事方法。在不断的练习过程中，你可以逐渐养成一个善于思考的习惯。</p>
<ol start="3">
<li>与更多富有朝气的同路人一同成长</li>
</ol>
<p>参加算法竞赛可以为你打开一扇前所未有的新世界的大门。你可以在竞赛圈中遇到非常多有个性，有思考的大佬。在与它们的交流过程中，你可以收获非常多的启发。近朱者赤，近墨者黑。</p>
<p>此外，我建议大家一定要看清自己的路，对自己的未来得有一定的规划。《人类简史》这本书告诉我们，人类天性短视，比较缺乏长远规划的能力。所以我们只能通过后天训练，在大量观察实践中，总结出自己的规划方案。算法竞赛可能并不是大学生活的全部，磨练算法能力的同时不要忘记自己其他方面能力的增长。</p>
<h2 id="平时训练建议"><a href="#平时训练建议" class="headerlink" title="平时训练建议"></a>平时训练建议</h2><h3 id="看什么书"><a href="#看什么书" class="headerlink" title="看什么书"></a>看什么书</h3><blockquote>
<p> 按照重要性排序：</p>
</blockquote>
<ul>
<li><strong>算法竞赛进阶指南</strong> –李煜东</li>
</ul>
<p>最为推荐。非常经典的指导书，业界统称为“蓝书”。强烈建议仔细阅读</p>
<ul>
<li>刘汝佳算法竞赛三件套</li>
</ul>
<p>包含《算法竞赛入门经典》等。经典算法竞赛书籍，上面有不少acm真题，推荐一看。</p>
<ul>
<li>挑战程序设计竞赛</li>
</ul>
<p>日本大佬写的算法书，讲的很好，推荐一看。</p>
<ul>
<li>算法设计与分析</li>
</ul>
<p>非常经典的教材，推荐一看。</p>
<h3 id="在哪里做题"><a href="#在哪里做题" class="headerlink" title="在哪里做题"></a>在哪里做题</h3><blockquote>
<p> 都挺重要：</p>
</blockquote>
<ul>
<li><a class="link"   href="https://codeforces.com/" >Codeforces <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>毛子维护的全球领先做题网站，上面有不少非常棒的题目，非常推荐！</p>
<p>建议参加网站不定期举行的排位赛。难度分为<code>Div1</code>，<code>Div2</code>，<code>Div3</code>，<code>Div4</code>四个水平，按照由难到易排序。强烈推荐。</p>
<ul>
<li><a class="link"   href="https://atcoder.jp/" >Atcoder <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>霓虹金维护的优秀做题网站，推荐其不定期举办的<code>Atcoder Beginner Contest(ABC)</code>，推荐好好做做，对水平提高很有帮助。</p>
<ul>
<li><a class="link"   href="https://luogu.com.cn/" >洛谷 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>很棒的题库网站。上面有很不错的<a class="link"   href="https://www.luogu.com.cn/training/9391" >题单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，推荐做做。</p>
<ul>
<li><a class="link"   href="https://vjudge.net/" >Vjudge <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>非常棒的题库网站，题目丰富。</p>
<h2 id="工具使用指南"><a href="#工具使用指南" class="headerlink" title="工具使用指南"></a>工具使用指南</h2><p>按照推荐程度排序：</p>
<ul>
<li>Clion</li>
</ul>
<p>最推荐。新手最推荐使用Clion编译器，执行简单，上手方便，代码补全很完善</p>
<ul>
<li>Sublime text</li>
</ul>
<p>如果你已经用烦了Clion，那么可以采用轻量编辑器<code>sublime text</code>。安装<code>CppfastOlympic</code>插件后可以非常方便的观察程序的输入输出。此外还有<code>代码片段</code>功能，可以预先将头文件等等写入，方便简单的一件插入。</p>
<ul>
<li>Vscode</li>
</ul>
<p>同样优秀的多功能编辑器，安装<code>CPHelper(commpetitive programming helper)</code>之后同样可以实现<code>sublime text</code>的效果。</p>
<ul>
<li>Neovim</li>
</ul>
<p>著名的轻量编辑器。熟悉掌握输入方式后可实现飞速修改代码的魔幻操作，缺点是需要一定时间去学习。</p>
<ul>
<li>好好学英语</li>
</ul>
<p>语言，小到做题，大到人类交流，都是非常重要的<code>工具</code>。不可疏忽，不可懈怠！</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大学生活流逝非常迅速，所以当你有想要做的事情，当你有想要实现的梦想，就请抓紧时间去做吧！岁月不等人，一日难再晨。</p>
<p>也许我们能够吸取他人的教训，但每个人都会或多或少走一些弯路。弯路并不可怕，这是不可避免的。所有走过的所有路，都是迈向更远道路的必经之路，所以不要放弃，不要灰心沮丧！Be happy！这很重要 : )</p>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/04/26/test/</url>
    <content><![CDATA[<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.832ex" height="5.018ex" role="img" focusable="false" viewBox="0 -1509.9 11417.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mfrac" transform="translate(907,0)"><g data-mml-node="mi" transform="translate(400.5,676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1127" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(3202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4258.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5036.6,0)"><g data-mml-node="msup" transform="translate(384.2,676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mn" transform="translate(646.1,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1578" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6854.6,0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mn" transform="translate(866,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(8124.1,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(8997.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9997.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(10766.6,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container></p>
]]></content>
  </entry>
  <entry>
    <title>0x04 二分</title>
    <url>/2023/03/10/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h2 id="整数集合上的二分"><a href="#整数集合上的二分" class="headerlink" title="整数集合上的二分"></a>整数集合上的二分</h2><p>有一个数x，想要找<code>比x大的数中最小的</code>与<code>比x小的数中最大的</code>求法不同。各有自己的求法：</p>
<h3 id="找比x大的数中最小的"><a href="#找比x大的数中最小的" class="headerlink" title="找比x大的数中最小的"></a>找比x大的数中最小的</h3><p>记所有数字为<code>a[i]</code>，找<code>比x大的数中最小的</code>，即左半段可行，查找左半段，采用以下代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 求 &gt;= x 的数中最小的 */</span></span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid] &gt;= x) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br></pre></td></tr></table></figure></div>

<p>主要修改<code>r</code>指针的位置，寻找到<code>小于</code>x的第一个数就停止，让<code>l</code>与<code>r</code>交错，最终取到这个值<code>a[l]</code>，此时<code>l == r</code>。倘若未找到，此时<code>l == r</code>，<code>a[l] == a[n]</code>(a : 1~n)</p>
<p><strong>例题：<a class="link"   href="https://www.luogu.com.cn/problem/P1902" >p1902 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<h3 id="找比x小的数中最大的"><a href="#找比x小的数中最大的" class="headerlink" title="找比x小的数中最大的"></a>找比x小的数中最大的</h3><p>要找<code>比x小的数中最大的</code>，即右半段可行，采用以下代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[l];</span><br></pre></td></tr></table></figure></div>

<p>主要修改<code>l</code>指针的位置，寻找到第一个比x大的数字停止。<code>l</code>，<code>r</code>交错，最终取到所求值<code>a[l]</code>，此时<code>l == r</code>。倘若未找到，此时<code>l == r</code>，<code>a[l] == a[n]</code>(a : 1~n)</p>
<p><strong>例题：<a class="link"   href="https://www.luogu.com.cn/problem/P2678" >p2678 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<blockquote>
<p>小技巧：可以通过将原二分区间$[1,n]$分别扩大成$[0,n]$和$[1,n+1]$，当没有找到元素时，l或r会位于新加的位置之上，此时说明a中不存在要找的数</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总之，正确写出二分的流程为：</p>
<ul>
<li>分析具体问题，确定左右半段是哪个可行区间，mid应该趋向哪个半段</li>
<li>根据分析结果，选择<code>r = mid, l = mid + 1, mid = (l + r) &gt;&gt; 1</code>或者<code>l = mid, r = mid - 1, mid = (l + r + 1) &gt;&gt; 1</code></li>
<li>最终终止于<code>l == r</code>，此值即为答案所在位置</li>
</ul>
<p><strong>实验例程：</strong></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>&#125;;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		<span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[mid] &lt;= x) l = mid;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; a[l] &lt;&lt; <span class="string">&quot; *&quot;</span> &lt;&lt; l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://www.luogu.com.cn/training/9374" >题单(每道题都很重要) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="实数域上的二分"><a href="#实数域上的二分" class="headerlink" title="实数域上的二分"></a>实数域上的二分</h2><p>我们需要确定二分精度<code>eps</code>，以<code>l + eps &lt; r</code>为循环条件，每次选择<code>r = mid</code>或<code>l = mid</code>分支之一即可。保留k位小数时，$eps = 10^{-(k+2)}$</p>
<blockquote>
<p>我们注意：考虑到精度，缩小区间时，我们得将<code>l</code>与<code>r</code>对齐才行，不可采取<code>-1/+1</code>等操作</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l + eps &lt; r) &#123;</span><br><span class="line">	<span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当精度不方便表示时，可以采用循环固定次数的二分方法，精度更高</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">calc</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="三分"><a href="#三分" class="headerlink" title="三分"></a>三分</h2><p>通过将单峰函数均匀分成三等分，每次比较两个等分点，缩小较小的等分点进行比较，最终求出该函数极值的算法</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (l + eps &lt; r) &#123;</span><br><span class="line">		<span class="type">double</span> lmid = l + (r - l) / <span class="number">3.0</span>;</span><br><span class="line">		<span class="type">double</span> rmid = l + (r - l) / <span class="number">3.0</span> * <span class="number">2.0</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">calc</span>(lmid) &lt; <span class="built_in">calc</span>(rmid)) l = lmid;</span><br><span class="line">		<span class="keyword">else</span> r = rmid;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><a class="link"   href="https://www.luogu.com.cn/problem/P3382" >p3382 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> l, r;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="type">double</span> cur = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">			cur *= x;</span><br><span class="line">		res += cur * a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (l + eps &lt; r) &#123;</span><br><span class="line">		<span class="type">double</span> lmid = l + (r - l) / <span class="number">3.0</span>;</span><br><span class="line">		<span class="type">double</span> rmid = l + (r - l) / <span class="number">3.0</span> * <span class="number">2.0</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">calc</span>(lmid) &lt; <span class="built_in">calc</span>(rmid)) l = lmid;</span><br><span class="line">		<span class="keyword">else</span> r = rmid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.5lf&quot;</span>, l);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法竞赛进阶指南通关计划</category>
        <category>0x04二分</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>算法竞赛进阶指南</tag>
      </tags>
  </entry>
  <entry>
    <title>倍增</title>
    <url>/2023/03/29/%E5%80%8D%E5%A2%9E/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>高精度加法&amp;乘法</title>
    <url>/2022/04/08/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>做题时常常遇到数值异常庞大的高精度题型，即使long long也无法存储，这时我们只能用模拟的方式，将数据存储在string中。</p>
</blockquote>
<h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>首先搞定输入：</p>
<blockquote>
<p>由于是加法，所以输入的数据应该非常巨大，所以我们应该用string来存储：</p>
</blockquote>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span></span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="comment">// a,b作为两个待加数，c作为结果</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2; <span class="comment">//用来存储输入的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><em>小技巧：利用数组的第一项来记录数组的长度，这样可以省出两个变量，但是记得在调用的时候for要从1开始。</em></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(), b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br></pre></td></tr></table></figure></div>

<p>之后我们来将输入的数据(string)转换成真实的数字数据：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">    a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>具体的实现机理为：</p>
<p>对于当前的位，用当前字符的ASCII值减去0的ASCII的值实现真实的数字值，再强行转换成int类型，将值赋给a,b两个数组中，完整的处理数据。</p>
</blockquote>
<p>转换好数据，我们接着实行加法运算：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;	<span class="comment">//记得用0作为数组的长度</span></span><br><span class="line">    <span class="comment">//对位加对位，不用担心其中的一个数组的长度，已经初始化为0</span></span><br><span class="line">	c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>数据存好了，但是可以想到，有的位大于十，于是接着我们来实现进位操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    c[i] = a[i] + b[i];</span><br><span class="line">    <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i] / <span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这时候我们可以想到，c 数组中仍然有未存储的数据，其当前为0，所以我们肯定不能弃之不管。因此我们可以有如下操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">    len--;</span><br><span class="line"><span class="comment">//也可以写成：</span></span><br><span class="line"><span class="keyword">for</span>(len; len &gt; <span class="number">1</span> &amp;&amp; c[len] == <span class="number">0</span>; len--);</span><br></pre></td></tr></table></figure></div>

<p>最后的最后：输出</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>以下为完整代码：</strong></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000010</span></span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="comment">//搞定输入，存储数据</span></span><br><span class="line">    a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(), b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    <span class="comment">//首先利用字符串相减的性质，将0的ASCII和当前数字相减</span></span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//所得到的为数字的真实数值，之后强制转换成int，得到答案。</span></span><br><span class="line">    len = <span class="built_in">max</span>(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    	c[i] = a[i] + b[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>; <span class="comment">//注意次序!</span></span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        cout &lt;&lt; c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h2><p>与加法类似，首先搞定输入：</p>
<p>同样是采用字符串转换成int进行存储：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(), b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p>之后我们进行乘法运算：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">        c[i+j<span class="number">-1</span>] += a[i] * b[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这里要注意：由于乘法的特性，我们需要将一位和另一数组的所有位相乘，所以显然两个for是最佳选择。两个for的限制条件均为对应该数组的长度</p>
</blockquote>
<p>之后我们对计算好了的c数组进行进位操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">len = a[<span class="number">0</span>] + b[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>考虑一下，进位该进多少位？</p>
<p>应该进a[0] + b[0]位，例如两个最大二位数99*99=9801(4位)</p>
</blockquote>
<p>之后进行清零操作：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">    len--;</span><br></pre></td></tr></table></figure></div>

<p>然后输出：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完整代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000010</span></span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="comment">//搞定输入，存储数据</span></span><br><span class="line">    a[<span class="number">0</span>] = s1.<span class="built_in">size</span>(); b[<span class="number">0</span>] = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        a[i] = s1[a[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">    <span class="comment">//首先利用字符串相减的性质，将0的ASCII和当前数字相减</span></span><br><span class="line">        b[i] = s2[b[<span class="number">0</span>]-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//所得到的为数字的真实数值，之后强制转换成int，得到答案。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++) &#123; <span class="comment">//存储数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            c[i+j<span class="number">-1</span>] += a[i]*b[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len = a[<span class="number">0</span>] + b[<span class="number">0</span>]; <span class="comment">//两个n位数相乘 乘积最多是n+n位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123; <span class="comment">//进位</span></span><br><span class="line">        <span class="keyword">if</span>(c[i] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            c[i+<span class="number">1</span>] += c[i]/<span class="number">10</span>; <span class="comment">//注意次序!</span></span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(c[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        cout &lt;&lt; c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
